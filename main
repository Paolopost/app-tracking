#!/bin/bash
#PBS -l nodes=1:ppn=8:dc2
#PBS -l walltime=12:00:00
#PBS -N tracking
#PBS -V

#make it testable 
if [ -z $ENV ]; then export ENV=IUHPC; fi

[ $PBS_O_WORKDIR ] && cd $PBS_O_WORKDIR

module load mrtrix/0.2.12
module load freesurfer
module load matlab
module load python

BGRAD="grad.b"

dtiinit=`./jq -r '.dtiinit' config.json`
input_nii_gz=$dtiinit/`./jq -r '.files.alignedDwRaw' $dtiinit/dt6.json`
BVALS=$dtiinit/`./jq -r '.files.alignedDwBvecs' $dtiinit/dt6.json`
BVECS=$dtiinit/`./jq -r '.files.alignedDwBvals' $dtiinit/dt6.json`

NUMFIBERS=`./jq -r '.fibers' config.json`
MAXNUMFIBERSATTEMPTED=`./jq -r '.fibers_max' config.json`
LMAX=`./jq -r '.lmax' config.json`
DOPROB=`./jq -r '.do_probabilistic' config.json`
DOSTREAM=`./jq -r '.do_deterministic' config.json`
DOTENSOR=`./jq -r '.do_tensor' config.json`

[ $DOPROB == "null" ] && DOPROB=true
[ $DOSTREAM == "null" ] && DOSTREAM=true
[ $DOTENSOR == "null" ] && DOTENSOR=true

#TODO - validate other fields?
if [ $LMAX == "null" ]; then
    echo "lmax is empty.. calculating max lmax to use from .bvals"
	LMAX=$(python calculatelmax.py)
fi

echo "Using LMAX: $LMAX"

#export MATLABPATH=$MATLABPATH:`pwd`
if [ -f grad.b ] && [ -f wm.nii.gz ]; then
        echo "grad.b and wm.nii.gz exist... skipping"
else
        echo "starting matlab to create grad.b & wm.nii.gz"
        time matlab -nodisplay -nosplash -r main
fi

echo "converting wm.nii.gz to wm.mif"
if [ -f wm.mif ]; then
    echo "wm.mif already exist... skipping"
else
    time mrconvert --quiet wm.nii.gz wm.mif
    ret=$?
    if [ ! $ret -eq 0 ]; then
        echo "failed to mrconver wm.nii.gz to wm.mif"
        echo $ret > finished
        exit $ret
    fi
fi

echo "converting dwi input to mif (should take a few minutes)"
if [ -f dwi.mif ]; then
    echo "dwi.mif already exist... skipping"
else
    time mrconvert --quiet $input_nii_gz dwi.mif
    ret=$?
    if [ ! $ret -eq 0 ]; then
        echo $ret > finished
        exit $ret
    fi
fi

###################################################################################################

echo "make brainmask from dwi data (about 18 minutes)"
if [ -f brainmask.mif ]; then
    echo "brainmask.mif already exist... skipping"
else
    time average -quiet dwi.mif -axis 3 - | threshold -quiet - - | median3D -quiet - - | median3D -quiet - brainmask.mif
    ret=$?
    if [ ! $ret -eq 0 ]; then
        echo $ret > finished
        exit $ret
    fi
fi

###################################################################################################

echo "dwi2tensor"
if [ -f dt.mif ]; then
    echo "dt.mif already exist... skipping"
else
    time dwi2tensor -quiet dwi.mif -grad $BGRAD dt.mif 
fi

echo "tensor2FA"
if [ -f fa.mif ]; then
    echo "fa.mif already exist... skipping"
else
    time tensor2FA -quiet dt.mif - | mrmult -quiet - brainmask.mif fa.mif
    ret=$?
    if [ ! $ret -eq 0 ]; then
        echo $ret > finished
        exit $ret
    fi
fi

###################################################################################################

echo "erode"
if [ -f sf.mif ]; then
    echo "sf.mif already exist... skipping"
else
    time erode -quiet brainmask.mif -npass 3 - | mrmult -quiet fa.mif - - | threshold -quiet - -abs 0.7 sf.mif
fi

echo "estimate response function"
if [ -f response.txt ]; then
    echo "response.txt already exist... skipping"
else
    time estimate_response -quiet dwi.mif sf.mif -grad $BGRAD response.txt
    ret=$?
    if [ ! $ret -eq 0 ]; then
        echo $ret > finished
        exit $ret
    fi
fi


###################################################################################################
# tensor tracking (DT_STREAM)

if [ $DOTENSOR == "true" ] ; then
    echo "generating DT_STREAM"
    #mrtrix doc says streamtrack/DT_STREAM doesn't need grad.. but without it, it fails
    time streamtrack -quiet DT_STREAM dwi.mif output.DT_STREAM.tck -seed wm.mif -mask wm.mif -grad $BGRAD -number $NUMFIBERS -maxnum $MAXNUMFIBERSATTEMPTED
    ret=$?
    if [ ! $ret -eq 0 ]; then
        echo $ret > finished
        exit $ret
    fi
fi

###################################################################################################
# SD_PROB and SD_STREAM uses CSD lmax.N.mif (aka FOD?) (should take about 10 minutes to several hours - depending on lmax value) 

outfile=lmax.mif
if [ -f $outfile ]; then
    echo "$outfile already exist... skipping"
else
    echo "computing lmax"
    time csdeconv -quiet dwi.mif -grad $BGRAD response.txt -lmax $LMAX -mask brainmask.mif $outfile
    ret=$?
    if [ ! $ret -eq 0 ]; then
        #curl -s -X POST -H "Content-Type: application/json" -d "{\"status\": \"failed\"}" ${SCA_PROGRESS_URL}.lmax > /dev/null
        echo $ret > finished
        exit $ret
    fi
fi

###################################################################################################
# streamtrack  (SD_STREAM)
if [ $DOSTREAM == "true" ] ; then
    echo "generating SD_STREAM"
    time streamtrack -quiet SD_STREAM lmax.mif output.SD_STREAM.tck -seed wm.mif -mask wm.mif -grad $BGRAD -number $NUMFIBERS -maxnum $MAXNUMFIBERSATTEMPTED
    ret=$?
    if [ ! $ret -eq 0 ]; then
        echo $ret > finished
        exit $ret
    fi
fi
curl -s -X POST -H "Content-Type: application/json" -d "{\"progress\": 1, \"status\": \"finished\"}" $progress_url > /dev/null

###################################################################################################
# streamtrack  (SD_PROB)
if [ $DOPROB == "true" ] ; then
    echo "generating SD_PROB"
    time streamtrack -quiet SD_PROB lmax.mif output.SD_PROB.tck -seed wm.mif -mask wm.mif -grad $BGRAD -number $NUMFIBERS -maxnum $MAXNUMFIBERSATTEMPTED
    ret=$?
    if [ ! $ret -eq 0 ]; then
        curl -s -X POST -H "Content-Type: application/json" -d "{\"status\": \"failed\"}" $progress_url > /dev/null
        echo $ret > finished
        exit $ret
    fi
fi
curl -s -X POST -H "Content-Type: application/json" -d "{\"progress\": 1, \"status\": \"finished\"}" $progress_url > /dev/null

###################################################################################################

echo "all done"
echo 0 > finished


